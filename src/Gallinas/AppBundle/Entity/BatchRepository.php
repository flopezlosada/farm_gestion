<?php

namespace Gallinas\AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * BatchRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BatchRepository extends EntityRepository
{
    public function getFeedAmountInInterval($batch, $start_time, $end_time)
    {
        $em = $this->getEntityManager();
        $dql = "select s from AppBundle:Sack s where s.batch=:batch and s.delivery_date >= :start_date and s.delivery_date < :end_date";
        $query = $em->createQuery($dql);
        $query->setParameter("batch", $batch);
        $query->setParameter("start_date", $start_time);
        $query->setParameter("end_date", $end_time);


        $amount = 0;
        if ($query->getResult())
        {

            foreach ($query->getResult() as $sack)
            {
                $amount += $sack->getWeight();
            }

        }

        return $amount;
    }

    public function getFowlsAliveInInterval($batch, $end_time)
    {
        $em = $this->getEntityManager();
        $dql = "select s from AppBundle:Fowl s where s.batch=:batch and (s.put_down_date is null or s.put_down_date > :end_date)";
        $query = $em->createQuery($dql);
        $query->setParameter("batch", $batch);
        $query->setParameter("end_date", $end_time);
        if ($query->getResult())
        {
            return count($query->getResult());
        }

    }

    public function getActiveBatch($product_id)
    {
        $em = $this->getEntityManager();
        $dql = "select s from AppBundle:Batch s where s.batch_status =1  and s.product=:product_id";
        $query = $em->createQuery($dql);
        $query->setParameter("product_id", $product_id);

        if ($query->getResult())
        {
            return count($query->getResult());
        }

    }
}

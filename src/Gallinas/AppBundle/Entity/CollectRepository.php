<?php

namespace Gallinas\AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CollectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CollectRepository extends EntityRepository
{
    public function findByUserWeek($user, $product, $week, $year = null)
    {
        if (!$year)
        {
            $year = date('Y');
        }
        $em = $this->getEntityManager();
        $unity = $em->getRepository('AppBundle:Unity')->find(1);
        if (in_array($week, array(1, 52, 53)))
        {
            $dql = "select sum(c.amount) as total from AppBundle:Collect c
                      where c.week=:week and c.unity=:unity and c.user=:user and c.product=:product
                      and (YEAR(c.collect_date)=:year or YEAR(c.collect_date)=:year2)";
            $query = $em->createQuery($dql);
            $query->setParameter("week", $week);
            $query->setParameter("unity", $unity);
            $query->setParameter("user", $user);
            $query->setParameter("year", $year);
            $query->setParameter("product", $product);;


            $dql_dozen = "select sum(c.amount) as total from AppBundle:Collect c
                              where c.week=:week and c.unity=:unity and c.user=:user and c.product=:product
                              and (YEAR(c.collect_date)=:year or YEAR(c.collect_date)=:year2)";
            $dozen = $em->getRepository('AppBundle:Unity')->find(3);
            $query_dozen = $em->createQuery($dql);
            $query_dozen->setParameter("week", $week);
            $query_dozen->setParameter("unity", $dozen);
            $query_dozen->setParameter("user", $user);
            $query_dozen->setParameter("year", $year);
            $query_dozen->setParameter("product", $product);


            if (date('n') == 12)
            {

                $query->setParameter("year2", $year);
                $query_dozen->setParameter("year2", $year);
            } else
            {
                if (date('W', strtotime("$year-01-01")) == 53)
                {
                    $query->setParameter("year2", $year);
                    $query_dozen->setParameter("year2", $year);
                } else
                {
                    $query->setParameter("year2", $year - 1);
                    $query_dozen->setParameter("year2", $year-1);
                }
            }

        } else
        {
            $dql = "select sum(c.amount) as total from AppBundle:Collect c
                      where c.week=:week and c.unity=:unity and c.user=:user and c.product=:product
                      and YEAR(c.collect_date)=:year";
            $query = $em->createQuery($dql);
            $query->setParameter("week", $week);
            $query->setParameter("unity", $unity);
            $query->setParameter("user", $user);
            $query->setParameter("year", $year);
            $query->setParameter("product", $product);


            $dql_dozen = "select sum(c.amount) as total from AppBundle:Collect c
                              where c.week=:week and c.unity=:unity and c.user=:user and c.product=:product
                              and YEAR(c.collect_date)=:year";
            $dozen = $em->getRepository('AppBundle:Unity')->find(3);
            $query_dozen = $em->createQuery($dql);
            $query_dozen->setParameter("week", $week);
            $query_dozen->setParameter("unity", $dozen);
            $query_dozen->setParameter("user", $user);
            $query_dozen->setParameter("year", $year);
            $query_dozen->setParameter("product", $product);
        }


        $amount_single = $query->getSingleScalarResult();


        $amount_dozen = $query_dozen->getSingleScalarResult();

        return $amount_dozen * 12 + $amount_single;
    }

    public function findByUserYear($user, $product, $year)
    {
        $em = $this->getEntityManager();
        $unity = $em->getRepository('AppBundle:Unity')->find(1);
        $dql = "select sum(c.amount) as total from AppBundle:Collect c where YEAR (c.collect_date)=:year and c.unity=:unity and c.user=:user and c.product=:product";
        $query = $em->createQuery($dql);
        $query->setParameter("year", $year);
        $query->setParameter("unity", $unity);
        $query->setParameter("user", $user);
        $query->setParameter("product", $product);

        $amount_single = $query->getSingleScalarResult();

        $dql_dozen = "select sum(c.amount) as total from AppBundle:Collect c where YEAR (c.collect_date)=:year and c.unity=:unity and c.user=:user and c.product=:product";
        $dozen = $em->getRepository('AppBundle:Unity')->find(3);
        $query_dozen = $em->createQuery($dql);
        $query_dozen->setParameter("year", $year);
        $query_dozen->setParameter("unity", $dozen);
        $query_dozen->setParameter("user", $user);
        $query_dozen->setParameter("product", $product);

        $amount_dozen = $query_dozen->getSingleScalarResult();

        return $amount_dozen * 12 + $amount_single;
    }

    /**
     * @param $user
     * @param $product
     * @param $last_date
     * @param $last_but_one_dated
     * Devuelve los productos consumidos por un usuario entre dos fechas dadas
     */
    public function findCollectUserDates($user, $product, $last_date, $last_but_one_date)
    {
        $em = $this->getEntityManager();
        if ($product->getId() == 1)
        {
            $unity = $em->getRepository('AppBundle:Unity')->find(1);
            $dql = "select sum(c.amount) as total from AppBundle:Collect c where c.collect_date between :start_date and :end_date and c.unity=:unity and c.user=:user and c.product=:product";
            $query = $em->createQuery($dql);
            $query->setParameter("start_date", $last_but_one_date);
            $query->setParameter("end_date", $last_date);
            $query->setParameter("unity", $unity);
            $query->setParameter("user", $user);
            $query->setParameter("product", $product);

            $amount_single = $query->getSingleScalarResult();

            $dql_dozen = "select sum(c.amount) as total from AppBundle:Collect c where c.collect_date between :start_date and :end_date and c.unity=:unity and c.user=:user and c.product=:product";
            $dozen = $em->getRepository('AppBundle:Unity')->find(3);
            $query_dozen = $em->createQuery($dql);
            $query_dozen->setParameter("start_date", $last_but_one_date);
            $query_dozen->setParameter("end_date", $last_date);
            $query_dozen->setParameter("unity", $dozen);
            $query_dozen->setParameter("user", $user);
            $query_dozen->setParameter("product", $product);

            $amount_dozen = $query_dozen->getSingleScalarResult();
            $amount = $amount_single + $amount_dozen * 12;

        } else
        {
            $dql = "select sum(c.amount) as total from AppBundle:Collect c where c.collect_date between :start_date and :end_date  and c.user=:user and c.product=:product";
            $query = $em->createQuery($dql);
            $query->setParameter("start_date", $last_but_one_date);
            $query->setParameter("end_date", $last_date);
            $query->setParameter("user", $user);
            $query->setParameter("product", $product);

            $amount = $query->getSingleScalarResult();
        }


        return $amount;
    }


    public function findCollectDates($product, $last_date, $last_but_one_date)
    {
        $em = $this->getEntityManager();
        if ($product->getId() == 1)
        {
            $unity = $em->getRepository('AppBundle:Unity')->find(1);
            $dql = "select sum(c.amount) as total from AppBundle:Collect c where c.collect_date between :start_date and :end_date and c.unity=:unity and  c.product=:product";
            $query = $em->createQuery($dql);
            $query->setParameter("start_date", $last_but_one_date);
            $query->setParameter("end_date", $last_date);
            $query->setParameter("unity", $unity);
            $query->setParameter("product", $product);

            $amount_single = $query->getSingleScalarResult();

            $dql_dozen = "select sum(c.amount) as total from AppBundle:Collect c where c.collect_date between :start_date and :end_date and c.unity=:unity and c.product=:product";
            $dozen = $em->getRepository('AppBundle:Unity')->find(3);
            $query_dozen = $em->createQuery($dql);
            $query_dozen->setParameter("start_date", $last_but_one_date);
            $query_dozen->setParameter("end_date", $last_date);
            $query_dozen->setParameter("unity", $dozen);
            $query_dozen->setParameter("product", $product);

            $amount_dozen = $query_dozen->getSingleScalarResult();
            $amount = $amount_single + $amount_dozen * 12;

        } else
        {
            $dql = "select sum(c.amount) as total from AppBundle:Collect c where c.collect_date between :start_date and :end_date and c.product=:product";
            $query = $em->createQuery($dql);
            $query->setParameter("start_date", $last_but_one_date);
            $query->setParameter("end_date", $last_date);
            $query->setParameter("product", $product);

            $amount = $query->getSingleScalarResult();
        }


        return $amount;
    }

    public function findTotalProductYearMonth($product, $year, $month, $unity)
    {
        $em = $this->getEntityManager();
        $dql = "select sum(c.amount) as total
        from AppBundle:Collect c where YEAR (c.collect_date)=:year and c.unity=:unity  and c.product=:product
        and MONTH (c.collect_date)=:month ";
        $query = $em->createQuery($dql);
        $query->setParameter("year", $year);
        $query->setParameter("month", $month);
        $query->setParameter("unity", $unity);
        $query->setParameter("product", $product);

        if ($query->getSingleScalarResult())
        {
            return $query->getSingleScalarResult();
        } else
        {
            return "0";
        }
    }

    public function findByUserAverageCollect($user, $product, $year)
    {
        return number_format($this->findCollectUserDates($user, $product, $year . '-12-31', $year . '-01-01') / $this->getAmountWeek($year), 2, ',', '.');
    }

    /**
     * @param $year
     * devuelve el total de semanas contabilizadas del año, es decir, las semanas que ha habido registro de puesta, recogida y demás.
     */
    private function getAmountWeek($year)
    {
        $em = $this->getEntityManager();
        $dql = "select count(l.week) from AppBundle:Lay l where YEAR(l.lay_date)=:year group by l.week order by l.week";
        $query = $em->createQuery($dql);
        $query->setParameter("year", $year);

        $result = $query->getResult();

        return count($result);
    }

    private function getListWeek($year)
    {
        $em = $this->getEntityManager();
        $dql = "select l.week from AppBundle:Lay l where YEAR(l.lay_date)=:year group by l.week order by l.week asc";
        $query = $em->createQuery($dql);
        $query->setParameter("year", $year);

        return $query->getResult();
    }

    /**
     * @param $user
     * @param $product
     * @param $year
     * @return array
     * devuelve el listado de recogidas de un usuario para un año y producto dado
     */
    public function findAllByUserProductYear($user, $product, $year)
    {

        $collects = array();
        foreach ($this->getListWeek($year) as $week)
        {
            if ($this->findByUserWeek($user, $product, $week['week']))
            {
                $collects[$week['week']] = $this->findByUserWeek($user, $product, $week['week']);
            }
        }

        return $collects;
    }
}

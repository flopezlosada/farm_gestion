<?php

namespace Gallinas\AppBundle\Entity;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends \Doctrine\ORM\EntityRepository
{
    public function findPending($month = null, $year = null, $task_type_id = null)
    {
        $em = $this->getEntityManager();
        if ($task_type_id != 1)
        {
            if (!$year)
            {
                $year = date('Y');
            }

            if (!$month)
            {
                $month = date('n');
            }


            $dql = "select t from AppBundle:Task t where t.finish=:finish and ((MONTH(t.expected_date)<=:month and YEAR(t.expected_date)<=:year)
            or (t.month<=:month and t.year <=:year)) ";
            if ($task_type_id)
            {
                $dql .= " and t.task_type=:task_type";
            }

        } else
        {
            $dql = "select t from AppBundle:Task t where t.finish=:finish and  t.task_type=:task_type";
        }

        $dql .= " ORDER BY  t.id asc";

        $query = $em->createQuery($dql);

        $query->setParameter("finish", 0);

        if ($task_type_id != 1)
        {
            $query->setParameter("year", $year);
            $query->setParameter("month", $month);
        }
        if ($task_type_id)
        {
            $query->setParameter("task_type", $task_type_id);
        }

        return $query->getResult();
    }

    public function findCrop($month = null, $year = null)
    {
        $crop_tasks = array();
        foreach ($this->findPending($month, $year) as $task)
        {
            if (count($task->getCropWorkings()) > 0)
            {
                $crop_tasks[] = $task;
            }
        }

        foreach ($this->findPending(null, null, 1) as $task)
        {
            if (count($task->getCropWorkings()) > 0)
            {
                $crop_tasks[] = $task;
            }
        }


        return $crop_tasks;
    }

    public function findEnded($month = null, $year = null)
    {
        $em = $this->getEntityManager();
        if (!$year)
        {
            $year = date('Y');
        }

        if (!$month)
        {
            $month = date('n');
        }
        $dql = "select t from AppBundle:Task t where t.finish=:finish and MONTH(t.real_date)=:month and YEAR(t.real_date)=:year ORDER BY  t.id asc";

        $query = $em->createQuery($dql);
        $query->setParameter("finish", 1);
        $query->setParameter("year", $year);
        $query->setParameter("month", $month);

        return $query->getResult();
    }

    public function findUserTask($user,$month = null, $year = null)
    {
       $em = $this->getEntityManager();
        if (!$year)
        {
            $year = date('Y');
        }

        if (!$month)
        {
            $month = date('n');
        }
        $dql = "select t from AppBundle:Task t inner join t.users u where t.finish=:finish and ((MONTH(t.expected_date)<=:month and YEAR(t.expected_date)<=:year)
            or (t.month<=:month and t.year <=:year)) and u=:user ORDER BY  t.id asc";

        $query = $em->createQuery($dql);
        $query->setParameter("finish", 0);
        $query->setParameter("user",$user);
        $query->setParameter("year", $year);
        $query->setParameter("month", $month);

        return $query->getResult();
    }
}

<?php

namespace Gallinas\AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * LayRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LayRepository extends EntityRepository
{

    public function findByWeek($week, $year)
    {
        $em = $this->getEntityManager();


        if (in_array($week, array(1, 52, 53)))
        {
            $dql = "select sum(l.amount) as total from AppBundle:Lay l where l.week=:week and (YEAR(l.lay_date)=:year or YEAR(l.lay_date)=:year2)";
            $query = $em->createQuery($dql);
            $query->setParameter("week", $week);
            $query->setParameter("year", $year);

            if (date('n') == 12)
            {

                $query->setParameter("year2", $year);
            } else
            {
                if (date('W', strtotime("$year-01-01")) == 53)
                {
                    $query->setParameter("year2", $year);
                } else
                {
                    $query->setParameter("year2", $year - 1);
                }
            }

        } else
        {
            $dql = "select sum(l.amount) as total from AppBundle:Lay l where l.week=:week and YEAR(l.lay_date)=:year";
            $query = $em->createQuery($dql);
            $query->setParameter("week", $week);
            $query->setParameter("year", $year);
        }


        if ($query->getSingleScalarResult())
        {
            return $query->getSingleScalarResult();
        } else
        {
            return "0";
        }

    }

    /**
     * Devuelve las estadísitcas de puesta por semana
     */
    public
    function findWeekLay($weeks_number = null, $year = null, $batch = null)
    {
        if (!$year)
        {
            $year = date('Y');
        }
        $em = $this->getEntityManager();
        $dql = "select sum(l.amount) as total, l.week as week, count(l.amount) as days, YEAR(l.lay_date)
                  as year_date from AppBundle:Lay l where YEAR(l.lay_date)=:year and l.week<>53 ";
        if ($batch)
        {
            $dql .= " and l.batch=:batch ";
        }
        $dql .= " group by l.week order by l.week desc";
        $query = $em->createQuery($dql);
        $query->setParameter("year", $year);
        if ($batch)
        {
            $query->setParameter("batch", $batch);
        }
        if ($weeks_number)
        {
            $query->setMaxResults($weeks_number);
        }

        return $query->getResult();
    }

    /**
     * @param null $weeks_number
     * @param null $year
     * @param null $batch
     * @return array
     * Esta función es para los gráficos highchart. Devuelve el total de huevos semanal desde el principio
     */
    function findHighchartWeekLay($batch)
    {

        $em = $this->getEntityManager();
        $dql = "select sum(l.amount) as total, l.week as week, count(l.amount) as days, YEAR(l.lay_date)
                  as year_date from AppBundle:Lay l where l.batch=:batch";

        $dql .= " group by l.week,year_date order by l.lay_date asc";
        $query = $em->createQuery($dql);

        $query->setParameter("batch", $batch);


        return $query->getResult();
    }


    public function findTotalEggs($year)
    {
        $em = $this->getEntityManager();
        $dql = "select sum(l.amount) as total from AppBundle:Lay l where YEAR(l.lay_date)=:year";
        $query = $em->createQuery($dql);
        $query->setParameter("year", $year);
        if ($query->getSingleScalarResult())
        {
            return $query->getSingleScalarResult();
        } else
        {
            return "0";
        }
    }

    public
    function getMonthLay($year, $month)
    {
        $em = $this->getEntityManager();
        $dql = "select sum(l.amount) as total from AppBundle:Lay l where YEAR(l.lay_date)=:year and MONTH(l.lay_date)=:month";
        $query = $em->createQuery($dql);
        $query->setParameter("year", $year);
        $query->setParameter("month", $month);

        if ($query->getSingleScalarResult())
        {
            return $query->getSingleScalarResult();
        } else
        {
            return "0";
        }
    }


    public
    function findDailyLayYear($year, $week, $day_of_week)
    {
        $em = $this->getEntityManager();
        $dql = "select l.amount  from AppBundle:Lay l  where YEAR(l.lay_date)=:year and l.week=:week and DAYOFWEEK(l.lay_date)=:day";
        $query = $em->createQuery($dql);
        $query->setParameter("year", $year);
        $query->setParameter("week", $week);
        $query->setParameter("day", $day_of_week);

        if ($query->getScalarResult())
        {
            return $query->getSingleScalarResult();
        } else
        {
            return "0";
        }
    }

    public
    function findWeeksYear($year)
    {
        $em = $this->getEntityManager();
        $dql = "select l.week from AppBundle:Lay l where YEAR(l.lay_date)=:year group by l.week order by l.week";
        $query = $em->createQuery($dql);
        $query->setParameter("year", $year);

        return $query->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
    }
}

<?php

namespace Gallinas\AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SaleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SaleRepository extends EntityRepository
{
    public function findTotalSalesAmount()
    {
        $em = $this->getEntityManager();
        $dql = "select sum(s.total_price) as total from AppBundle:Sale s";
        $query = $em->createQuery($dql);


        if ($query->getSingleScalarResult())
        {
            return $query->getSingleScalarResult();
        } else
        {
            return "0";
        }

    }

    public function findTotalProductYear($product, $year)
    {
        $em = $this->getEntityManager();
        $unity = $em->getRepository('AppBundle:Unity')->find(1);
        $dql = "select sum(c.amount) as total from AppBundle:Sale c where YEAR (c.sale_date)=:year and c.unity=:unity  and c.product=:product";
        $query = $em->createQuery($dql);
        $query->setParameter("year", $year);
        $query->setParameter("unity", $unity);
        $query->setParameter("product", $product);

        $amount_single = $query->getSingleScalarResult();

        $dql_dozen = "select sum(c.amount) as total from AppBundle:Collect c where YEAR (c.sale_date)=:year and c.unity=:unity and c.product=:product";
        $dozen = $em->getRepository('AppBundle:Unity')->find(3);
        $query_dozen = $em->createQuery($dql);
        $query_dozen->setParameter("year", $year);
        $query_dozen->setParameter("unity", $dozen);
        $query_dozen->setParameter("product", $product);

        $amount_dozen = $query_dozen->getSingleScalarResult();

        return $amount_dozen * 12 + $amount_single;
    }

    /**
     * @param $product
     * @param $year
     * @return mixed
     * devuelve las ventas por mes y aÃ±o
     */
    public function findTotalProductYearMonth($product, $year,$month,$unity)
    {
        $em = $this->getEntityManager();
        $dql = "select sum(c.amount) as total
        from AppBundle:Sale c where YEAR (c.sale_date)=:year and c.unity=:unity  and c.product=:product
        and MONTH (c.sale_date)=:month ";
        $query = $em->createQuery($dql);
        $query->setParameter("year", $year);
        $query->setParameter("month", $month);
        $query->setParameter("unity", $unity);
        $query->setParameter("product", $product);

        if ($query->getSingleScalarResult())
        {
            return $query->getSingleScalarResult();
        } else
        {
            return "0";
        }
    }

    /**
     * @param $product
     * @param $start_date
     * @param $end_date
     * devuelve el dinero ganado entre fechas
     */
    public function findPeriodSale($product, $end_date, $start_date)
    {
        $em = $this->getEntityManager();
        $dql = "select sum(c.total_price) as total from AppBundle:Sale c where c.sale_date between :start_date and :end_date and c.product=:product";
        $query = $em->createQuery($dql);
        $query->setParameter("start_date", $start_date);
        $query->setParameter("end_date", $end_date);
        $query->setParameter("product", $product);

        if ($query->getSingleScalarResult())
        {
            return $query->getSingleScalarResult();
        } else
        {
            return "0";
        }
    }


}
